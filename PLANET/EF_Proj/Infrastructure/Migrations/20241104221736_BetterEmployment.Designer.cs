// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DomainContext))]
    [Migration("20241104221736_BetterEmployment")]
    partial class BetterEmployment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.2.24474.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Employment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Salary")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FatherId")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MotherId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SpouseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("FatherId");

                    b.HasIndex("MotherId");

                    b.HasIndex("SpouseId")
                        .IsUnique();

                    b.ToTable("People");

                    b.HasDiscriminator<string>("type").HasValue("person_base");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PersonPerson", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SiblingsId")
                        .HasColumnType("uuid");

                    b.HasKey("PersonId", "SiblingsId");

                    b.HasIndex("SiblingsId");

                    b.ToTable("PersonPerson");
                });

            modelBuilder.Entity("Domain.PublicPerson", b =>
                {
                    b.HasBaseType("Domain.Person");

                    b.Property<decimal>("Fortune")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("public_person");
                });

            modelBuilder.Entity("Domain.Employment", b =>
                {
                    b.HasOne("Domain.Person", "Person")
                        .WithMany("Employments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.EmploymentType", "EmploymentType", b1 =>
                        {
                            b1.Property<Guid>("EmploymentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("EmploymentId");

                            b1.ToTable("Employments");

                            b1.WithOwner()
                                .HasForeignKey("EmploymentId");
                        });

                    b.Navigation("EmploymentType")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.HasOne("Domain.Person", "Father")
                        .WithMany()
                        .HasForeignKey("FatherId");

                    b.HasOne("Domain.Person", "Mother")
                        .WithMany()
                        .HasForeignKey("MotherId");

                    b.HasOne("Domain.Person", "Spouse")
                        .WithOne()
                        .HasForeignKey("Domain.Person", "SpouseId");

                    b.OwnsMany("Domain.Address", "Addresses", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PersonId", "Id");

                            b1.ToTable("Address");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsMany("Domain.PhoneNumber", "PhoneNumbers", b1 =>
                        {
                            b1.Property<Guid>("PersonId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.HasKey("PersonId", "Id");

                            b1.ToTable("PhoneNumber");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Addresses");

                    b.Navigation("Father");

                    b.Navigation("Mother");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("Spouse");
                });

            modelBuilder.Entity("PersonPerson", b =>
                {
                    b.HasOne("Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Person", null)
                        .WithMany()
                        .HasForeignKey("SiblingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Person", b =>
                {
                    b.Navigation("Employments");
                });
#pragma warning restore 612, 618
        }
    }
}
