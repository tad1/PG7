"use strict"

import { expect } from "chai";
import { describe } from "mocha";
import { Book, Account,Library,LibraryBook } from "../src/library.js";

describe('canary-tests', function()
{
    it('should always pass the canary test', function()
    {
        expect(true).to.eql(true);
    });
});


describe('Book', function(){
    it('should be immutable', function(){
        let book = new Book({author: "Author",title: "Title", category: "Example"})
        expect(Object.isFrozen(book)).to.be.true;
    })
    it('should require title, and author', function(){
        expect(() => new Book({author: "Author"})).to.throw("Missing required properties: {title}")
        expect(() => new Book({title: "Title"})).to.throw("Missing required properties: {author,}")
        expect(()=> new Book({title: "Title", author: "Author"})).to.not.throw()
    });
    it('should create book object with props', function(){
        let book = new Book({author: "Author",title: "Title", category: "Example", additional_category: "Additional Category"})
        expect(book.author).equal("Author");
        expect(book.title).equal("Title");
        expect(book.category).equal("Example");
        expect(book.additional_category).equal("Additional Category");
    })
});

describe('Account', function(){
    it('should be have immutable id', function(){
        let account = new Account("1", "Name");
        expect(()=>{account.id = "2"}).to.throw();
    });
    it('should have mutable name', function(){
        let account = new Account("1", "Name");
        account.name = "New name";
        expect(account.name).equal("New name");
    })
    it('should create an account object', () => {
        const account = new Account("1", "Name");
        // using have own property is not bechaviorar; it's testing the implementation
        // a better name for test would be: "should create account object owning properties"
        expect(account).to.have.own.property("id", "1");
        expect(account).to.have.own.property("name", "Name");
    });
})

describe('LibraryBook', function(){
    it('should be immutable', function(){
        let book = new Book({author: "Author", title: "Title"})
        let libraryBook = new LibraryBook("G155", book);
        expect(Object.isFrozen(libraryBook)).to.be.true;
    })
    it('should create an account object', () => {
        // this is testing a constructor of struct - such tests can be automated with DDT
        //      there's no point in writing them if there's no logic to test
        let book = new Book({author: "Author", title: "Title"})
        let libraryBook = new LibraryBook("G155", book);
        expect(libraryBook.id).equal("G155");
        expect(libraryBook.book).equal(book);
    });
})

describe('Library', function(){
    // populate lib
    /**
     * @type {Library}
     */
    let library;
    /**
     * @type {Array<LibraryBook>}
     */
    let libBooks;
    /**
     * @type {Array<Book>}
     */
    let books;
    let dummyAccount;
    beforeEach(function(){
        library = new Library("First Library", "Somewhere");
        dummyAccount = new Account(1,"Dummy");
        
        books = [ // generated by GPT model
            new Book({ title: "1984", author: "George Orwell", publisher: "Secker & Warburg", publish_year: "1949", ISBN_10: "0451524934", language: "English", category: "Fiction", genre: "Dystopian", keywords: "totalitarianism, surveillance" }),
            new Book({ title: "1984", author: "George Orwell", publisher: "Penguin Books", publish_year: "1950", ISBN_13: "9780141036144", language: "English", genre: "Dystopian" }),
            new Book({ title: "The Great Gatsby", author: "F. Scott Fitzgerald", publisher: "Charles Scribner's Sons", publish_year: "1925", ISBN_10: "0743273567", language: "English", genre: "Tragedy" }),
            new Book({ title: "The Great Gatsby", author: "F. Scott Fitzgerald", publisher: "Penguin Classics", publish_year: "2000", ISBN_13: "9780141182636", language: "English" }),
            new Book({ title: "Moby Dick", author: "Herman Melville", publisher: "Harper & Brothers", publish_year: "1851", genre: "Adventure", keywords: "whale, sea" }),
            new Book({ title: "Moby Dick", author: "Herman Melville", publisher: "Penguin Classics", publish_year: "2001", ISBN_13: "9780142437247", language: "English", genre: "Adventure" }),
            new Book({ title: "To Kill a Mockingbird", author: "Harper Lee", publisher: "J.B. Lippincott & Co.", publish_year: "1960", category: "Fiction", genre: "Southern Gothic", keywords: "racism, justice" }),
            new Book({ title: "The Catcher in the Rye", author: "J.D. Salinger", publisher: "Little, Brown and Company", publish_year: "1951", language: "English", genre: "Realism" }),
            new Book({ title: "Pride and Prejudice", author: "Jane Austen", publish_year: "1813", ISBN_13: "9780199535569", category: "Fiction", genre: "Romance", keywords: "love, society" }),
            new Book({ title: "Pride and Prejudice", author: "Jane Austen", publisher: "Penguin Books", publish_year: "2003", ISBN_13: "9780141439518", language: "English", genre: "Romance" }),
            new Book({ title: "The Hobbit", author: "J.R.R. Tolkien", publisher: "George Allen & Unwin", publish_year: "1937", genre: "Fantasy" }),
            new Book({ title: "The Hobbit", author: "J.R.R. Tolkien", publisher: "HarperCollins", publish_year: "1999", ISBN_13: "9780261102217", language: "English" }),
            new Book({ title: "Brave New World", author: "Aldous Huxley", publisher: "Chatto & Windus", publish_year: "1932", language: "English" }),
            new Book({ title: "Brave New World", author: "Aldous Huxley", publisher: "Harper Perennial", publish_year: "2006", ISBN_13: "9780060850524", language: "English", genre: "Dystopian" }),
            new Book({ title: "The Odyssey", author: "Homer", publisher: "Penguin Classics", publish_year: "1996", language: "Greek", genre: "Mythology", keywords: "epic, journey" }),
            new Book({ title: "The Odyssey", author: "Homer", publisher: "Oxford University Press", publish_year: "2008", ISBN_13: "9780199536788", genre: "Epic" }),
            new Book({ title: "The Road", author: "Cormac McCarthy", publisher: "Alfred A. Knopf", publish_year: "2006", genre: "Post-apocalyptic", keywords: "father, son, survival" }),
            new Book({ title: "The Road", author: "Cormac McCarthy", publisher: "Vintage", publish_year: "2007", ISBN_13: "9780307387899", language: "English", genre: "Post-apocalyptic" })
        ];
        
        // Generate over 20 library books from the book list, adding similar titles with different editions
        libBooks = [
            new LibraryBook("L001", books[0]),
            new LibraryBook("L002", books[1]),
            new LibraryBook("L003", books[2]),
            new LibraryBook("L004", books[3]),
            new LibraryBook("L005", books[4]),
            new LibraryBook("L006", books[5]),
            new LibraryBook("L007", books[6]),
            new LibraryBook("L008", books[7]),
            new LibraryBook("L009", books[8]),
            new LibraryBook("L010", books[9]),
            
            // Adding more copies with different library IDs for different editions
            new LibraryBook("L011", books[0]),
            new LibraryBook("L012", books[1]),
            new LibraryBook("L013", books[2]),
            new LibraryBook("L014", books[3]),
            new LibraryBook("L015", books[4]),
            new LibraryBook("L016", books[5]),
            new LibraryBook("L017", books[6]),
            new LibraryBook("L018", books[7]),
            new LibraryBook("L019", books[8]),
            new LibraryBook("L020", books[9]),
            
            // Duplicates with editions, different publishers
            new LibraryBook("L021", books[10]),
            new LibraryBook("L022", books[11]),
            new LibraryBook("L023", books[12]),
            new LibraryBook("L024", books[13]),
            new LibraryBook("L025", books[14]),
            new LibraryBook("L026", books[15]),
            new LibraryBook("L027", books[16]),
            new LibraryBook("L028", books[17]),
        ];
        library.registerBooks(libBooks);
    });

    describe('#rent()', function(){
        it('should add info to ledger', function(){
            let booksToRent = [libBooks[3], libBooks[5]]

            library.rent(booksToRent, dummyAccount);

            expect(library.ledger.get(libBooks[3]).length).equal(1);
            expect(library.ledger.get(libBooks[3]).at(-1).return_date).to.be.null;
            expect(library.ledger.get(libBooks[3]).at(-1).borrower).to.be.equal(dummyAccount);
            expect(library.ledger.get(libBooks[3]).at(-1).object).to.be.equal(libBooks[3]);
            // expect(library.ledger.get(libBooks[3]).at(-1).borrow_date); 
        })
        it('should return books that are avaliable to rent', function(){
            let booksToRent = [libBooks[3], libBooks[5], new LibraryBook("L999", books[0])];
            expect(library.rent(booksToRent)).to.have.members([libBooks[3], libBooks[5]])
            booksToRent = [...booksToRent, libBooks[4]];
            expect(library.rent(booksToRent)).to.have.members([libBooks[4]])

        })
    });
    describe('#return()', function(){
        it('should mark book as returned in ledger', function(){
            let booksToRent = [libBooks[3], libBooks[5]]
            library.rent(booksToRent, dummyAccount);
            library.return([libBooks[3]]);
            expect(library.ledger.get(libBooks[3]).at(-1).return_date).to.be.not.null;
        });
        it('should return books unable to return', function(){
            let booksToRent = [libBooks[3], libBooks[5]]
            let dummyBook = new LibraryBook("L999", books[0])
            library.rent(booksToRent, dummyAccount);
            expect(library.return([libBooks[3],libBooks[4], dummyBook])).to.have.members([libBooks[4], dummyBook])
        })

    });
    describe('#registerBooks()', function(){
        it('should register books', function(){
            let dummyBook = new Book({"author":"Author", "title": "Title"})
            let dummyBook1 = new LibraryBook("L998", books[1])
            let dummyBook2 = new LibraryBook("L999", dummyBook)
            library.registerBooks([dummyBook1, dummyBook2]);
            expect(library.books.get(books[1])).include(dummyBook1)
            expect(library.books.get(dummyBook)).include(dummyBook2)
        })
    });
    describe('#searchExact()', function(){
        it('should find exact books', function(){
            expect(library.searchExact({title:"The Hobbit"}).map(book => book.id)).to.have.members(["L021", "L022"])
            expect(library.searchExact({title:"The Hobbit", publish_year: "1937"}).map(book => book.id)).to.have.members(["L021"])
        })

    });
    describe('#searchRE()', function(){
        it('should find books with regex', function(){
            expect(library.searchRE({title:"The.*", genre: "(Fantasy)|(Tragedy)"}).map(book => book.id)).to.have.members(["L003","L013","L021"])
        })
    });
    describe('#stats()', function(){
        it('should display stats', function(){
            expect(library.stats()).to.be.equal(`
First Library, Somewhere
total books: 28
total unique books: 18`)
        })
    })
})

